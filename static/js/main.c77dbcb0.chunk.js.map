{"version":3,"sources":["ChoreCard.js","App.js","serviceWorker.js","index.js"],"names":["ChoreCard","props","state","rotation","shift","getThisWeekNumber","names","day","Date","getDay","valueOf","getMonth","getDate","jan4","getFullYear","ret","Math","ceil","console","log","bg","text","border","className","style","Body","Title","this","Subtitle","getThisSunday","Text","chore","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TA8CeA,E,YAzCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,SAAU,EAAKF,MAAMG,MAAQ,EAAKC,qBAEtC,EAAKC,MAAQ,CAAC,QAAS,QAAS,SAAU,SAAU,MALrC,E,6EAUjB,IADA,IAAIC,EAAM,IAAIC,KACU,IAAjBD,EAAIE,UACTF,EAAM,IAAIC,KAAKD,EAAIG,UAAY,OAEjC,OAAQH,EAAII,WAAa,EAAK,IAAMJ,EAAIK,Y,0CAKxC,IADA,IAAIL,EAAM,IAAIC,KACU,IAAjBD,EAAIE,UACTF,EAAM,IAAIC,KAAKD,EAAIG,UAAY,OAEjC,IAAIG,EAAO,IAAIL,KAAKD,EAAIO,cAAe,EAAG,GACtCC,EAAM,EAAIC,KAAKC,MAAMV,EAAMM,GAAQ,MAAW,GAElD,OADAK,QAAQC,IAAIJ,GACLA,I,+BAIP,OAAO,6BAAK,kBAAC,IAAD,CAAMK,GAAG,QAAQC,KAAK,QAAQC,OAAO,OAAOC,UAAU,UAAUC,MAAO,CAAC,YAAa,UAC/F,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAKC,MAAN,KAAaC,KAAKrB,MAAMqB,KAAKzB,MAAMC,SAAW,IAC9C,kBAAC,IAAKyB,SAAN,CAAeL,UAAU,mBAAzB,sBAA+DI,KAAKE,iBACpE,kBAAC,IAAKC,KAAN,KACGH,KAAK1B,MAAM8B,SAIlB,kC,GAtCkBC,IAAMC,W,MCcfC,MAdf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAWnB,MAAO,EAAG2B,MAAM,mFAC3B,kBAAC,EAAD,CAAW3B,MAAO,EAAG2B,MAAM,kBAC3B,kBAAC,EAAD,CAAW3B,MAAO,EAAG2B,MAAM,wCAC3B,kBAAC,EAAD,CAAW3B,MAAO,EAAG2B,MAAM,iBAC3B,kBAAC,EAAD,CAAW3B,MAAO,EAAG2B,MAAM,eCCbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c77dbcb0.chunk.js","sourcesContent":["import React from 'react'\nimport './ChoreCard.css'\nimport Card from 'react-bootstrap/Card'\n\nclass ChoreCard extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            rotation: this.props.shift + this.getThisWeekNumber()\n        }\n        this.names = [\"Jason\", \"Steve\", \"Andrew\", \"Steven\", \"AJ\"]\n    }\n\n    getThisSunday() {\n      var day = new Date();\n      while (day.getDay() !== 0) {\n        day = new Date(day.valueOf() - 86400000)\n      }\n      return (day.getMonth() + 1) + \"/\" + day.getDate();\n    }\n\n    getThisWeekNumber() {\n      var day = new Date();\n      while (day.getDay() !== 0) {\n        day = new Date(day.valueOf() - 86400000)\n      }\n      var jan4 = new Date(day.getFullYear(), 0, 4);  \n      var ret = 2 + Math.ceil((day - jan4) / 86400000 / 7);\n      console.log(ret);\n      return ret;\n    }\n\n    render() {\n      return <div><Card bg=\"light\" text=\"black\" border=\"info\" className=\"mx-auto\" style={{\"max-width\": \"26rem\"}}>\n        <Card.Body>\n          <Card.Title>{this.names[this.state.rotation % 5]}</Card.Title>\n          <Card.Subtitle className=\"mb-2 text-muted\">Chores for week of {this.getThisSunday()}</Card.Subtitle>\n          <Card.Text>\n            {this.props.chore}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n      <br/></div>\n    }\n}\n\nexport default ChoreCard;","import React from 'react';\nimport ChoreCard from './ChoreCard';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChoreCard shift={0} chore=\"Clean kitchen counter, coffee table, both sinks, thorough sweep of common area\"></ChoreCard>\n      <ChoreCard shift={1} chore=\"Clean bathtub\"></ChoreCard>\n      <ChoreCard shift={2} chore=\"Clean stovetop, microwave, and oven\"></ChoreCard>\n      <ChoreCard shift={3} chore=\"Clean toilet\"></ChoreCard>\n      <ChoreCard shift={4} chore=\"Nothing!\"></ChoreCard>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}